replacements = {
    'ii':'-',
    'jj':'-',
    'kk':'-',
    'ij':'k',
    'jk':'i',
    'ki':'j',
    '--':'',
    'ik':'-j',
    'kj':'-i',
    'ji':'-k'
}

def collapse(s):
    nc = s.count('-')
    if nc:
        s = s.replace('-','')
        if nc%2: s = '-'+s
    os = s
    while len(s) > 1:
        done = 1
        for i in range(len(s)-1):
            chunk = s[i:i+2]
            if chunk in replacements:
                s.replace(chunk, replacements[chunk])
                done = 0
                break

def evaluate(x):
    s = 0
    x = map('1ijk'.index, x)
    c = 0
    lut = [[0,1,2,3],[1,0,3,2],[2,3,0,1],[3,2,1,0]]
    sign = [[0,0,0,0],[0,1,0,1],[0,1,1,0],[0,0,1,1]]
    for i in x:
        s ^= sign[c][i]
        c = lut[c][i]
    return ['','-'][s]+'1ijk'[c]

    

import sys

lines = sys.stdin.read().split('\n')
T = int(lines.pop(0))

while lines[0]:
    L, X = map(int, lines.pop(0).split(' '))
    s = lines.pop(0)*X
    print s
    done = 0
    for a in range(1,len(s)-1):
        for b in range(a+1,len(s)):
            print a, b, s[:a], s[a:b], s[b:]
            if evaluate(s[:a]) == 'i' and evaluate(s[a:b]) == 'j' and evaluate(s[b:]) == 'k':
                print 'YES'
                done = 1
                break
        if done: break
    if not done:
        print 'NO'
